###############################################################################
## Monit control file created by <%= node['fqdn'] %>
###############################################################################

###############################################################################
## Global section
###############################################################################

## Start monit in the background (run as a daemon):
set daemon <%= node['monit']['daemon'] %>  # check services at 2-minute intervals
<% if node['monit']['daemon_start_delay'] %>
        with start delay 240  # optional: delay the first check by 4-minutes
<% end %>

# Logging
<% if node['monit']['use_syslog'] == "true" %>
set logfile syslog facility log_daemon
<% else %>
   <% if node['monit']['logfile'] %>
set logfile <%= node['monit']['logfile'] %>
   <% end %>
<% end %>

<% if node['monit']['idfile'] %>
set idfile <%= node['monit']['idfile'] %>
<% end %>

<% if node['monit']['statefile'] %>
set statefile <%= node['monit']['statefile'] %>
<% end %>


# Mail alerts
<% if node["monit"]["alert_email"] %>
set alert <%= node["monit"]["alert_email"] %> <% if node["monit"]["alert_email_timeout"] %> only on {}  <% end %>

set mailserver <%= node["monit"]["mail"]["hostname"] %> port <%= node["monit"]["mail"]["port"] %>
  <% if node["monit"]["mail"]["username"] -%>
  username "<%= node["monit"]["mail"]["username"] %>"
  <% end -%>
  <% if node["monit"]["mail"]["password"] -%>
  password "<%= node["monit"]["mail"]["password"] %>"
  <% end -%>
  <% if node["monit"]["mail"]["tls"] -%>
  using tlsv1
  <% end -%>
  with timeout <%= node["monit"]["mail"]["timeout"] %> seconds
<% end %>


# Mail format
set mail-format {
  from: <%= node["monit"]["mail"]["from"] %>
  subject: <%= node["monit"]["mail"]["subject"] %>
  message: <%= node["monit"]["mail"]["message"] %>
}


## Monit has an embedded web server which can be used to view status of
## services monitored, the current configuration, actual services parameters
## and manage services from a web interface.

<% if node['monit']['web_interface']['enable'] %>
set httpd port <%= node['monit']['web_interface']['port'] %> and
  use address <%= node['monit']['web_interface']['address'] %>
  <% if node['monit']['web_interface']['allow'] %>
  allow <%= node['monit']['web_interface']['allow'] %>
  <% end %>
<% end %>

###############################################################################
## Services
###############################################################################
##
## Check general system resources such as load average, cpu and memory
## usage. Each test specifies a resource, conditions and the action to be
## performed should a test fail.
#
#  check system myhost.mydomain.tld
#    if loadavg (1min) > 4 then alert
#    if loadavg (5min) > 2 then alert
#    if memory usage > 75% then alert
#    if cpu usage (user) > 70% then alert
#    if cpu usage (system) > 30% then alert
#    if cpu usage (wait) > 20% then alertss
#
#
## Check a file for existence, checksum, permissions, uid and gid. In addition
## to alert recipients in the global section, customized alert will be sent to
## additional recipients by specifying a local alert handler. The service may
## be grouped using the GROUP option.
#
#  check file apache_bin with path /usr/local/apache/bin/httpd
#    if failed checksum and
#       expect the sum 8f7f419955cefa0b33a2ba316cba3659 then unmonitor
#    if failed permission 755 then unmonitor
#    if failed uid root then unmonitor
#    if failed gid root then unmonitor
#    alert security@foo.bar on {
#           checksum, permission, uid, gid, unmonitor
#        } with the mail-format { subject: Alarm! }
#    group server
#
#
## Check that a process is running, in this case Apache, and that it respond
## to HTTP and HTTPS requests. Check its resource usage such as cpu and memory,
## and number of children. If the process is not running, monit will restart
## it by default. In case the service was restarted very often and the
## problem remains, it is possible to disable monitoring using the TIMEOUT
## statement. This service depends on another service (apache_bin) which
## is defined above.
#
#  check process apache with pidfile /usr/local/apache/logs/httpd.pid
#    start program = "/etc/init.d/httpd start" with timeout 60 seconds
#    stop program  = "/etc/init.d/httpd stop"
#    if cpu > 60% for 2 cycles then alert
#    if cpu > 80% for 5 cycles then restart
#    if totalmem > 200.0 MB for 5 cycles then restart
#    if children > 250 then restart
#    if loadavg(5min) greater than 10 for 8 cycles then stop
#    if failed host www.tildeslash.com port 80 protocol http
#       and request "/monit/doc/next.php"
#       then restart
#    if failed port 443 type tcpssl protocol http
#       with timeout 15 seconds
#       then restart
#    if 3 restarts within 5 cycles then timeout
#    depends on apache_bin
#    group server
#
#
## Check filesystem permissions, uid, gid, space and inode usage. Other services,
## such as databases, may depend on this resource and an automatically graceful
## stop may be cascaded to them before the filesystem will become full and data
## lost.
#
#  check filesystem datafs with path /dev/sdb1
#    start program  = "/bin/mount /data"
#    stop program  = "/bin/umount /data"
#    if failed permission 660 then unmonitor
#    if failed uid root then unmonitor
#    if failed gid disk then unmonitor
#    if space usage > 80% for 5 times within 15 cycles then alert
#    if space usage > 99% then stop
#    if inode usage > 30000 then alert
#    if inode usage > 99% then stop
#    group server
#
#
## Check a file's timestamp. In this example, we test if a file is older
## than 15 minutes and assume something is wrong if its not updated. Also,
## if the file size exceed a given limit, execute a script
#
#  check file database with path /data/mydatabase.db
#    if failed permission 700 then alert
#    if failed uid data then alert
#    if failed gid data then alert
#    if timestamp > 15 minutes then alert
#    if size > 100 MB then exec "/my/cleanup/script" as uid dba and gid dba
#
#
## Check directory permission, uid and gid.  An event is triggered if the
## directory does not belong to the user with uid 0 and gid 0.  In addition,
## the permissions have to match the octal description of 755 (see chmod(1)).
#
#  check directory bin with path /bin
#    if failed permission 755 then unmonitor
#    if failed uid 0 then unmonitor
#    if failed gid 0 then unmonitor
#
#
## Check a remote host network services availability using a ping test and
## check response content from a web server. Up to three pings are sent and
## connection to a port and a application level network check is performed.
#
#  check host myserver with address 192.168.1.1
#    if failed icmp type echo count 3 with timeout 3 seconds then alert
#    if failed port 3306 protocol mysql with timeout 15 seconds then alert
#    if failed url
#       http://user:password@www.foo.bar:8080/?querystring
#       and content == 'action="j_security_check"'
#       then alert
#
#



###############################################################################
## Includes
###############################################################################
# Include configs from
include <%= node["monit"]["includes_dir"] %>/*